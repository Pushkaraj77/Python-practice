class Employee:
    no_of_leaves = 8

    def __init__(self, aname, asalary, arole):
        self.name = aname
        self.salary = asalary
        self.role = arole

    def printdetails(self):
        return f"Name is {self.name}, Salary is {self.salary} and role is {self.role} "

# How to change class attributes outside the class is classmethod

    @classmethod
    def change_leaves(cls, new_leaves):
        cls.no_of_leaves = new_leaves

    # @classmethod
    # def from_str(cls, string):
    #     params = string.split("-")
    #     return cls(params[0], params[1], params[2])

    @classmethod
    def from_str(cls, string):
        return cls(*string.split("-"))
# this method is alternative to the params method
# * is use of args

    @staticmethod
    def printgood(string):
        print("This is good " + string)
# Static method is used when we don't want to perform the function on self by default which is the case with classmethod and constructors

# Packing static in a class helps in maintaining clean program as you won't get jumbles between many static functions.

harry = Employee("Harry", "455", "Instructor")
rohan = Employee("Rohan", "255", "Student")
karan = Employee.from_str("karan-480-Student")
# This, method is used to use only one string of info instead of giving multiple strings
print(karan.salary)
